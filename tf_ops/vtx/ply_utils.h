#include <iostream>
#include <stdio.h>
#include <fstream>

namespace tfply {
    
    struct Triangle {
        int a;
        int b;
        int c;
        int d;
        Triangle(int a, int b, int c, int d):a(a),b(b),c(c),d(d) {}
    };
    
    struct Vertex {
        float x;
        float y;
        float z;
        Vertex(float x, float y, float z):x(x),y(y),z(z) {}
    };

    struct Normal {
        float x;
        float y;
        float z;
        Normal(float x, float y, float z):x(x),y(y),z(z) {}
    };

    void ReadPLY(std::string fname, std::vector<Vertex>& vtxs, std::vector<Normal>& normals, std::vector<Triangle>& tris) {
        std::ifstream infile(fname.c_str());
        
        std::string str = "";
        int vcount;
        int fcount;
        while(str != "end_header"){
            infile >> str;
            if(str == "vertex") 
                infile >> vcount;
            if(str == "face")
                infile >> fcount;
        }
        
        for(int i = 0; i < vcount; i++) {
            float x, y, z, nx, ny, nz;
            infile >> x >> y >> z >> nx >> ny >> nz;
            vtxs.push_back(Vertex(x, y, z));
            normals.push_back(Normal(nx, ny, nz));
        }

        for(int i = 0; i < fcount; i++) {
            int a, b, c, d;
            infile >> a >> b >> c >> d;
            tris.push_back(Triangle(a,b,c,d));
        }

        infile.close();
    }

    void WritePLY(std::string fname, const std::vector<Vertex>& vtxs, const std::vector<Normal>& normals, const std::vector<Triangle>& tris) {
        std::ofstream outfile(fname.c_str());

        outfile << "ply\n" << "format ascii 1.0\n" << "comment Generated by TFPLY\n";
        outfile << "element vertex " << vtxs.size() << std::endl;
        outfile << "property float x\n";
        outfile << "property float y\n";
        outfile << "property float z\n";
        outfile << "property float nx\n";
        outfile << "property float ny\n";
        outfile << "property float nz\n";
        outfile << "element face " << tris.size() << std::endl;
        outfile << "property list uchar int vertex_indices\n";
        outfile << "end_header" << std::endl;
        
        for(int i = 0; i < vtxs.size(); i++) {
            outfile << vtxs[i].x << " " << vtxs[i].y <<  " " << vtxs[i].z << " " << normals[i].x << " " << normals[i].y << " " << normals[i].z << std::endl;
        }

        for(int j = 0; j < tris.size(); j++) {
            outfile << tris[j].a << " " << tris[j].b << " " << tris[j].c << " " << tris[j].d << std::endl;
        }

        outfile.close();
    }
    //void WritePLY(std::string fname, std::vector)
}

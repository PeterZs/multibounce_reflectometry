import numpy as np

def readPLY(filename):
    plyfile = open(filename, "r");
    plines = plyfile.readlines();
    #print("SIZE: ",len(plines));
    
    vertexCount = 0
    start = False;
    normals = [];
    vertices = [];
    indices = [];
    curr = 0
    currI = 0
    leftover = 0
    leftoverIndices = 0
    for line in plines:
        #print(line)
        #print(len(line.split(" ")))
        #print(line.split(" "))
        if line.startswith("element vertex"):
            vertexCount = int(line.split(" ")[2]);
            normals = np.zeros((vertexCount, 3));
            vertices = np.zeros((vertexCount, 3));
            leftover = vertexCount;

        if line.startswith("element face"):
            indexCount = int(line.split(" ")[2]);
            indices = np.zeros((indexCount, 3));
            leftoverIndices = indexCount;

        if start and not leftover == 0:
            assert(len(line.split(" ")) == 6 or len(line.split(" ")) == 7);
            normals[curr, 0] = float(line.split(" ")[3]);
            normals[curr, 1] = float(line.split(" ")[4]);
            normals[curr, 2] = float(line.split(" ")[5]);
            vertices[curr, 0] = float(line.split(" ")[0]);
            vertices[curr, 1] = float(line.split(" ")[1]);
            vertices[curr, 2] = float(line.split(" ")[2]);
            curr = curr + 1
            leftover = leftover - 1

        elif start:
            assert(len(line.split(" ")) == 4 or len(line.split(" ")) == 5);
            assert(line.split(" ")[0] == "3");
            indices[currI, 0] = int(line.split(" ")[1]);
            indices[currI, 1] = int(line.split(" ")[2]);
            indices[currI, 2] = int(line.split(" ")[3]);
            currI = currI + 1;
            leftoverIndices = leftoverIndices - 1;

            if leftoverIndices == 0:
                break;

        if line == "end_header\n":
            print("Found end header")
            start = True;

    return (vertices, normals, indices);

def writePLY(filename, vertices, normals, indices):
    outfile = open(filename, "w");
    outfile.write("ply\nformat ascii 1.0\ncomment Generated by TFPLY\n");
    outfile.write("element vertex " + format(len(vertices)) + "\n");
    outfile.write("property float x\n");
    outfile.write("property float y\n");
    outfile.write("property float z\n");
    outfile.write("property float nx\n");
    outfile.write("property float ny\n");
    outfile.write("property float nz\n");
    outfile.write("element face " + format(len(indices)) + "\n");
    outfile.write("property list uchar int vertex_indices\n");
    outfile.write("end_header\n");

    assert(vertices.shape == normals.shape);
    for (vtx, n) in zip(vertices, normals):
        outfile.write(format(vtx[0]) + " " + format(vtx[1]) + " " + format(vtx[2]) + " ");
        outfile.write(format(n[0]) + " " + format(n[1]) + " " + format(n[2]) + "\n");

    for idx in indices:
        outfile.write("3 " + format(idx[0]) + " " + format(idx[1]) + " " + format(idx[2]) + "\n");

    outfile.close();
#print(load_normals("/tmp/mts_srcmesh.ply"))     
